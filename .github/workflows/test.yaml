name: Run Tests and Lint

on: [push]

permissions:
  actions: read
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-flask-inputfilter-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-flask-inputfilter-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Build flask-inputfilter image with cache
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            -t flask-inputfilter . --load

      - name: Run tests in Docker and upload coverage to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          set -x # Print commands and their arguments as they are executed.
          set -e # Exit immediately if a command exits with a non-zero status.
          set -u # Exit immediately if a variable is not defined.

          docker run --rm -e COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }} flask-inputfilter sh -c "coverage run --source=flask_inputfilter -m pytest tests/ && coveralls"

      - name: Run code style checks
        run: |
          set -x # Print commands and their arguments as they are executed
          set -e # Exit immediately if a command exits with a non-zero status
          set -u # Exit immediately if a variable is not defined
      
          docker run --rm flask-inputfilter flake8
